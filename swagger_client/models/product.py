# coding: utf-8

"""
    Halla I/O

    <p><strong>Getting Started:</strong></p> <ol type=\"1\"> <li><p>Obtain Credentials (Please Contact Halla to Obtain Credentials):</p> <ol type=\"a\"> <li><p><strong>'serviceAccount'</strong>: Add your Service Account in the <strong>header</strong> for all API requests to the Halla services. This is used to track API usage for authorization, billing, etc.</p></li> <li><p><strong>'key'</strong>: Add your API Key to the <strong>query</strong> for all API requests to the Halla services. This is used as a first line of defense to authenticate API requests.</p></li> </ol></li> <li><p>Add Your Catalog:</p> <ol type=\"a\"> <li><p>Use the <strong>POST STORE</strong> route to create a virtual product catalog. Please add a minimum of 1 <strong>thousand products per store</strong>, each with a <strong>'primaryId'</strong> and <strong>'label'</strong>. This will trigger Halla to index the catalog, allowing for Recommendation, Substitution, and Search services within minutes.</p></li> </ol></li> <li><p>Get Recommendations:</p> <ol type=\"a\"> <li><p>Use the <strong>GET PRODUCTS</strong> route and set the strategy to <strong>'recommend'</strong>.</p></li> <li><p>Fill in the <strong>'storeId'</strong> query parameter to use a specific catalog.</p></li> <li><p>Provide <strong>one or more</strong> of the following query parameters:</p> <ol type=\"i\"> <li><p><strong>'productId'</strong>: Biases recommendations to be relevant for a specific product.</p></li> <li><p><strong>'cartProductIds'</strong>: Biases recommendations to be relevant for all products in the cart.</p></li> <li><p><strong>'consumerId'</strong>: Biases recommendations to be relevant for the consumer's previous browsing and past purchase history.</p></li> </ol></li> <li><p>If multiple inputs are given, the recommendations will be blended to best satisfy multiple constraints.</p></li> </ol></li> <li><p>Get Substitutions:</p> <ol type=\"a\"> <li><p>Use the <strong>GET PRODUCTS</strong> route and set the strategy to <strong>'substitute'</strong>.</p></li> <li><p>Fill in the <strong>'storeId'</strong> query parameter to use a specific catalog.</p></li> <li><p>Fill in the <strong>'productId'</strong> query parameter.</p></li> </ol></li> <li><p>Get Search Results:</p> <ol type=\"a\"> <li><p>Use the <strong>GET PRODUCTS</strong> route and set the strategy to <strong>'search'</strong>.</p></li> <li><p>Fill in the <strong>'storeId'</strong> query parameter to use a specific catalog.</p></li> <li><p>Fill in the <strong>'text'</strong> query parameter.</p></li> </ol></li> <li><p>Supercharge Performance with Purchases:</p> <ol type=\"a\"> <li><p>Use the <strong>POST ORDER</strong> route to add one or more transactions to our system. Transactions will be used to fine tune our models to provide a better experience for your shoppers. To enable advanced personalization, please provide the <strong>'consumerId'</strong> field.</p></li> </ol></li> </ol> <p><strong>Advanced Integration:</strong></p> <ul> <li><p>Integrate Multi-Tenant Capabilities:</p> <ul> <li><p>Ensure that store and product <strong>ids</strong> are <strong>globally unique</strong> across all tenants. If needed, tenant name can be appended to the id in question to guarantee uniqueness.</p></li> <li><p>Attach <strong>'brand'</strong> field to allow for better personalization at scale.</p></li> </ul></li> <li><p>Enable Real-Time Inventory:</p> <ul> <li><p>Integrate the <strong>POST STORE</strong> route into your inventory management solution and do one of the following:</p> <ul> <li><p>Call the <strong>POST STORE</strong> route at regular intervals to overwrite existing store data.</p></li> <li><p>Call the <strong>ADD / DELETE</strong> product from store routes to update the catalog upon changes and current availabilities.</p></li> </ul></li> </ul></li> <li><p>(BETA) Enable Advanced Filtering:</p> <ul> <li><p>To enable SNAP, Own-Brand, Sponsored Product and other custom filters, create multiple virtual stores for each real store location. Each virtual store should correspond to a subset of products to include in the filter. Store ids can be generated by prepending the filter identifier to your store id.</p></li> </ul></li> <li><p>(BETA) Run an A/B Test:</p> <ul> <li><p>Work with your Halla Support Rep to define the scope of your A/B test.</p></li> <li><p>Call the <strong>POST ORDER</strong> route to add purchases with which to evaluate.</p></li> <li><p>If you are <strong>tracking spend</strong> between test groups, then it is <strong>required</strong> to attach the <strong>'campaign'</strong> field in the request body of the order.</p></li> <li><p>If you are <strong>testing at the consumer level</strong>, then it is <strong>required</strong> to attach the <strong>'consumerId'</strong> field in the request body of the order.</p></li> </ul></li> <li><p>(BETA) Add Fulfillment Data:</p> <ul> <li><p>Call the <strong>POST ORDER</strong> route multiple times corresponding to when an order is placed and later fulfilled. Set the <strong>'code'</strong> attribute in each item to <strong>'purchased' or 'fulfilled'</strong> corresponding to the order status.</p></li> </ul></li> </ul> 

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, primary_id=None, sku=None, upc_e=None, upc_a=None, ean=None, plu=None, label=None, description=None, quantity=None, unit_of_measure=None, brand=None, manufacturer=None, ingredients=None, nutrients=None, image_urls=None, tags=None):
        """
        Product - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'primary_id': 'str',
            'sku': 'str',
            'upc_e': 'str',
            'upc_a': 'str',
            'ean': 'str',
            'plu': 'str',
            'label': 'str',
            'description': 'str',
            'quantity': 'float',
            'unit_of_measure': 'str',
            'brand': 'str',
            'manufacturer': 'str',
            'ingredients': 'str',
            'nutrients': 'list[Nutrient]',
            'image_urls': 'list[str]',
            'tags': 'dict(str, list[str])'
        }

        self.attribute_map = {
            'primary_id': 'primaryId',
            'sku': 'sku',
            'upc_e': 'upcE',
            'upc_a': 'upcA',
            'ean': 'ean',
            'plu': 'plu',
            'label': 'label',
            'description': 'description',
            'quantity': 'quantity',
            'unit_of_measure': 'unitOfMeasure',
            'brand': 'brand',
            'manufacturer': 'manufacturer',
            'ingredients': 'ingredients',
            'nutrients': 'nutrients',
            'image_urls': 'imageUrls',
            'tags': 'tags'
        }

        self._primary_id = primary_id
        self._sku = sku
        self._upc_e = upc_e
        self._upc_a = upc_a
        self._ean = ean
        self._plu = plu
        self._label = label
        self._description = description
        self._quantity = quantity
        self._unit_of_measure = unit_of_measure
        self._brand = brand
        self._manufacturer = manufacturer
        self._ingredients = ingredients
        self._nutrients = nutrients
        self._image_urls = image_urls
        self._tags = tags

    @property
    def primary_id(self):
        """
        Gets the primary_id of this Product.
        The primary key for a product at a given store.

        :return: The primary_id of this Product.
        :rtype: str
        """
        return self._primary_id

    @primary_id.setter
    def primary_id(self, primary_id):
        """
        Sets the primary_id of this Product.
        The primary key for a product at a given store.

        :param primary_id: The primary_id of this Product.
        :type: str
        """

        self._primary_id = primary_id

    @property
    def sku(self):
        """
        Gets the sku of this Product.
        Secondary id to link identical products inside of a retailer's system.

        :return: The sku of this Product.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this Product.
        Secondary id to link identical products inside of a retailer's system.

        :param sku: The sku of this Product.
        :type: str
        """

        self._sku = sku

    @property
    def upc_e(self):
        """
        Gets the upc_e of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :return: The upc_e of this Product.
        :rtype: str
        """
        return self._upc_e

    @upc_e.setter
    def upc_e(self, upc_e):
        """
        Sets the upc_e of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :param upc_e: The upc_e of this Product.
        :type: str
        """

        self._upc_e = upc_e

    @property
    def upc_a(self):
        """
        Gets the upc_a of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :return: The upc_a of this Product.
        :rtype: str
        """
        return self._upc_a

    @upc_a.setter
    def upc_a(self, upc_a):
        """
        Sets the upc_a of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :param upc_a: The upc_a of this Product.
        :type: str
        """

        self._upc_a = upc_a

    @property
    def ean(self):
        """
        Gets the ean of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :return: The ean of this Product.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """
        Sets the ean of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :param ean: The ean of this Product.
        :type: str
        """

        self._ean = ean

    @property
    def plu(self):
        """
        Gets the plu of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :return: The plu of this Product.
        :rtype: str
        """
        return self._plu

    @plu.setter
    def plu(self, plu):
        """
        Sets the plu of this Product.
        Secondary link to third party databases to leverage rich product attributes.

        :param plu: The plu of this Product.
        :type: str
        """

        self._plu = plu

    @property
    def label(self):
        """
        Gets the label of this Product.
        Primary product name.

        :return: The label of this Product.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Product.
        Primary product name.

        :param label: The label of this Product.
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """
        Gets the description of this Product.
        Secondary descriptive text.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Product.
        Secondary descriptive text.

        :param description: The description of this Product.
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """
        Gets the quantity of this Product.
        Amount of product sold.

        :return: The quantity of this Product.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this Product.
        Amount of product sold.

        :param quantity: The quantity of this Product.
        :type: float
        """

        self._quantity = quantity

    @property
    def unit_of_measure(self):
        """
        Gets the unit_of_measure of this Product.
        Unit this product is measured in. 'pack, lb, kg, oz, ml, etc.'

        :return: The unit_of_measure of this Product.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """
        Sets the unit_of_measure of this Product.
        Unit this product is measured in. 'pack, lb, kg, oz, ml, etc.'

        :param unit_of_measure: The unit_of_measure of this Product.
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def brand(self):
        """
        Gets the brand of this Product.
        Marketing and promotional brand this product is sold under.

        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """
        Sets the brand of this Product.
        Marketing and promotional brand this product is sold under.

        :param brand: The brand of this Product.
        :type: str
        """

        self._brand = brand

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this Product.
        Manufacturer of a given product.

        :return: The manufacturer of this Product.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this Product.
        Manufacturer of a given product.

        :param manufacturer: The manufacturer of this Product.
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def ingredients(self):
        """
        Gets the ingredients of this Product.
        String of ingredients found in this product.

        :return: The ingredients of this Product.
        :rtype: str
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """
        Sets the ingredients of this Product.
        String of ingredients found in this product.

        :param ingredients: The ingredients of this Product.
        :type: str
        """

        self._ingredients = ingredients

    @property
    def nutrients(self):
        """
        Gets the nutrients of this Product.
        Nutrition information for this product.

        :return: The nutrients of this Product.
        :rtype: list[Nutrient]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """
        Sets the nutrients of this Product.
        Nutrition information for this product.

        :param nutrients: The nutrients of this Product.
        :type: list[Nutrient]
        """

        self._nutrients = nutrients

    @property
    def image_urls(self):
        """
        Gets the image_urls of this Product.
        Links to product images.

        :return: The image_urls of this Product.
        :rtype: list[str]
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls):
        """
        Sets the image_urls of this Product.
        Links to product images.

        :param image_urls: The image_urls of this Product.
        :type: list[str]
        """

        self._image_urls = image_urls

    @property
    def tags(self):
        """
        Gets the tags of this Product.
        Flexible data structure to capture custom attributes such as categorization, tags, flavors, diet complience, etc.

        :return: The tags of this Product.
        :rtype: dict(str, list[str])
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Product.
        Flexible data structure to capture custom attributes such as categorization, tags, flavors, diet complience, etc.

        :param tags: The tags of this Product.
        :type: dict(str, list[str])
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
